// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.customFooterMessage = "© 2024 made with ❤️ by Nevis"
    ext.customLogoFile = projectDir.toString() + "/logo-style.css"
}

plugins {
    alias libs.plugins.android.application apply false
    alias libs.plugins.jetbrains.kotlin.android apply false
    alias libs.plugins.jetbrains.kotlin.parcelize apply false
    alias libs.plugins.jetbrains.kotlin.kapt apply false
    alias libs.plugins.dagger.hilt.android apply false
    alias libs.plugins.androidx.navigation.safeargs apply false
    alias libs.plugins.jetbrains.dokka apply true
}

ext.getConfig = { String name ->
    File localPropertiesFile = project.rootProject.file('local.properties')
    if (localPropertiesFile?.exists()) {
        Properties localProperties = new Properties()
        localProperties.load(localPropertiesFile.newDataInputStream())
        if (localProperties.containsKey(name)) {
            return localProperties.getProperty(name)
        }
    }
    def env = System.getenv(name)
    if (env != null) {
        return env
    }
    def prop = System.getProperty(name)
    if (prop != null) {
        return prop
    }
    if (project.hasProperty(name)) {
        return project.getProperty(name)
    }

    println("Getting env variable failed, returning empty: set $name as environment variable or as system property in your ~/.gradle/gradle.properties")
    return ""
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            url "https://maven.pkg.github.com/nevissecurity/nevis-mobile-authentication-sdk-android-package"
            credentials {
                username = getConfig("GH_USERNAME")
                password = getConfig("GH_PERSONAL_ACCESS_TOKEN")
            }
        }
        google {
            content {
                excludeGroupByRegex "ch\\.nevis\\..*"
            }
        }
        mavenCentral {
            content {
                excludeGroupByRegex "ch\\.nevis\\..*"
            }
        }
    }
}

subprojects {
    apply plugin: "org.jetbrains.dokka"

    tasks.named("dokkaHtml") {
        moduleName.set("$rootProject.name-$project.name")
        outputDirectory.set(file("build/dokka/$project.name"))
        failOnWarning.set(false)
        suppressInheritedMembers.set(true)
        suppressObviousFunctions.set(true)

        dokkaSourceSets {
            configureEach {
                reportUndocumented.set(true)
                includes.from("module.md")
                externalDocumentationLink {
                    url.set(new URL("https://docs.nevis.net/mobilesdk/${getConfig("VERSION_NAME")}/api-references/javadoc/"))
                    packageListUrl.set(new URL("https://docs.nevis.net/mobilesdk/${getConfig("VERSION_NAME")}/api-references/javadoc/element-list"))
                }
            }
        }

        pluginsMapConfiguration.set(
            [
                "org.jetbrains.dokka.base.DokkaBase": """{
                    "customStyleSheets": ["$customLogoFile"],
                    "footerMessage": "$customFooterMessage"
                }"""
            ]
        )
    }

    tasks.named("dokkaHtmlPartial") {
        moduleName.set("$rootProject.name-$project.name")
        failOnWarning.set(false)
        suppressInheritedMembers.set(true)
        suppressObviousFunctions.set(true)

        dokkaSourceSets {
            configureEach {
                reportUndocumented.set(true)
                includes.from("module.md")
                externalDocumentationLink {
                    url.set(new URL("https://docs.nevis.net/mobilesdk/${getConfig("VERSION_NAME")}/api-references/javadoc/"))
                    packageListUrl.set(new URL("https://docs.nevis.net/mobilesdk/${getConfig("VERSION_NAME")}/api-references/javadoc/element-list"))
                }
            }
        }

        pluginsMapConfiguration.set(
            [
                "org.jetbrains.dokka.base.DokkaBase": """{
                    "customStyleSheets": ["$customLogoFile"],
                    "footerMessage": "$customFooterMessage"
                }"""
            ]
        )
    }
}

afterEvaluate {
    tasks.named("dokkaHtmlMultiModule") {
        pluginsMapConfiguration.set(
            [
                "org.jetbrains.dokka.base.DokkaBase": """{
                    "customStyleSheets": ["$customLogoFile"],
                    "footerMessage": "$customFooterMessage"
                }"""
            ]
        )
    }
}
