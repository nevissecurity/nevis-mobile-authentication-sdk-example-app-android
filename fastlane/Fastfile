##
## Fastlane configuration for the Nevis Mobile Authentication SDK Android Example application.
## See https://docs.fastlane.tools
##

require "java-properties"

default_platform(:android)

root_dir = File.expand_path(File.join(File.dirname(__FILE__), "../"))
apk_path = File.join(root_dir, "app/build/outputs/apk/debug/app-debug.apk")
gradle_properties = File.join(root_dir, "gradle.properties")
application_module = File.join(root_dir, "app/src/main/java/ch/nevis/exampleapp/dagger/ApplicationModule.kt")
android_manifest = File.join(root_dir, "app/src/main/AndroidManifest.xml")
build_gradle = File.join(root_dir, "app/build.gradle.kts")
display_name = "Nevis Mobile Authentication SDK Android Example App"

def report_on_success(message)
    slack(
        message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
        slack_url: ENV["SLACK_WEBHOOK_URL"]
    ) if ENV["SLACK_WEBHOOK_URL"]
end

def report_on_error(message, exception)
    slack(
        message: "#{message}\nCheck build logs: #{ENV['CURRENT_BUILD_URL']}",
        slack_url: ENV["SLACK_WEBHOOK_URL"],
        success: false,
        attachment_properties: {
            fields: [
                {
                    title: "Error message",
                    value: exception.to_s,
                    short: false
                }
            ]
        }
    ) if ENV["SLACK_WEBHOOK_URL"]
    UI.user_error!(exception.to_s)
end

platform :android do
    desc "Build and tag the application"
    desc "#### Options"
    desc " * **`host_name`**: Authentication Cloud host name/instance name the build application will communicate with."
    desc " * **`custom_uri_scheme`**: Custom deep link URI scheme of the built application. \
        The application can be started using with such browser links that use this scheme."
    desc ""
    lane :main do |options|
        host_name = options[:host_name]
        custom_uri_scheme = options[:custom_uri_scheme]

        # Loading gradle.properties file.
        properties = JavaProperties.load(gradle_properties)

        # Get version name from properties.
        version_name = ""
        version_name = properties[:VERSION_NAME] if properties.key?(:VERSION_NAME)

        # Get version code/build number from properties.
        build_number = "1"
        build_number = properties[:VERSION_CODE] if properties.key?(:VERSION_CODE)

        # Get version code/build number from environment variable if exists.
        build_number = ENV["BUILD_NUMBER"] || build_number

        # Writing overwriting gradle.properties with new version code/build number.
        properties[:VERSION_CODE] = build_number
        JavaProperties.write(properties, gradle_properties)

        UI.message("Building #{display_name} #{version_name} (#{build_number}) üì¶")

        modify_file(
            file_path: application_module,
            old_value: ".hostname(\"myinstance.mauth.nevis.cloud\")",
            new_value: ".hostname(\"#{host_name}.mauth.nevis.cloud\")"
        )

        modify_file(
            file_path: android_manifest,
            old_value: "<data android:host=\"myinstance.mauth.nevis.cloud\" />",
            new_value: "<data android:host=\"#{host_name}.mauth.nevis.cloud\" />"
        )

        modify_file(
            file_path: android_manifest,
            old_value: "<data android:scheme=\"myaccessapp\" />",
            new_value: "<data android:scheme=\"#{custom_uri_scheme}\" />"
        )

        modify_file(
            file_path: build_gradle,
            old_value: "android {",
            new_value: ENV["SIGNING_CONFIGS"],
            mode: "append"
        )

        modify_file(
            file_path: build_gradle,
            old_value: "signingConfig = signingConfigs.getByName(\"debug\")",
            new_value: "signingConfig = signingConfigs.getByName(\"signing\")"
        )

        gradle(task: "assembleDebug")

        firebase_app_distribution(
            app: ENV["FIREBASE_APP_ID"],
            apk_path:,
            groups: "developers, internal-testers, presales"
        ) if ENV["FIREBASE_APP_ID"]

        add_git_tag(tag: "release/#{version_name}/#{build_number}", message: "[Fastlane] #{display_name} #{version_name} (#{build_number})")
        push_git_tags

        report_on_success("#{display_name} build completed: #{version_name} (#{build_number}) ‚úÖ")
    rescue => e
        report_on_error("#{display_name} build failed ‚ùå", e)
    end

    desc "Build the application"
    desc ""
    lane :pr do
        gradle(task: "assembleDebug")
    end
end
